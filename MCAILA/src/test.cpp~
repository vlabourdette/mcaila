
 /**************************************************************/
 /*                                                            */
 /*  Monte Carlo Arithmetic Implementation for Linear Algebra  */
 /*                                                            */
 /*  Copyright (C) 2015 Valentin I. Labourdette :              */
 /*  valentin dot labourdette at gmail dot com                 */
 /*                                                            */
 /*  This file is part of the Monte Carlo Arithmetic           */
 /*  Implementation for Linear Algebra (MCAILA). MCAILA is     */
 /*  free software : you can redistribute it and/or modify it  */
 /*  under the terms of the GNU General Public License as      */
 /*  published by the Free Software Foundation, either         */
 /*  version 3 of the License, or (at your option) any later   */
 /*  version.                                                  */
 /*                                                            */
 /*  This program is distributed in the hope that it will be   */
 /*  useful, but WITHOUT ANY WARRANTY; without even the        */
 /*  implied warranty of MERCHANTABILITY or FITNESS FOR A      */
 /*  PARTICULAR PURPOSE. See the GNU General Public License    */
 /*  for more details.                                         */
 /*                                                            */
 /*  You should have received a copy of the GNU General        */
 /*  Public License along with this program.  If not, see      */
 /*  <http://www.gnu.org/licenses/>.                           */
 /*                                                            */
 /**************************************************************/




#include "mca.hpp"
#include "lab.hpp"
#include <iostream>

#if defined(_OPENMP)
#include <omp.h>
#endif



int main ()
{
  
  
  auto A = mcaila::make_matrix<double>(2,2);
  A[0][0] = .86470000000000000000000000000000000;
  A[0][1] = .57660000000000000000000000000000000;
  A[1][0] = .43220000000000000000000000000000000;
  A[1][1] = .28220000000000000000000000000000000;
  auto x = mcaila::make_matrix<double>(2,1);
  x[0][0] = .28850000000000000000000000000000000;
  x[1][0] = .14420000000000000000000000000000000;

  std::vector<size_t> pivot =
    mcaila::LU_factor<double>(A);

  mcaila::LU_solve<double> (A, x, pivot);
  
  std::cout << x[0][0] << " "
	    << x[1][0] << std::endl;
  
  return 0;
}
